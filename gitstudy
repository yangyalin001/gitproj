 mkdir  一个空目录   -->git init 命令
 git add  文件名  --> git commit -m “文档描述”
 git status  查看修改状态   是否被修改
 git diff 文件名  查看修改内容
 git log 查看日志   --pretty==online  
 
 Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
 git reset --hard HEAD^  返回上一个版本

当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
 找到commit ID  在使用命令 git reset --hard id   恢复


       add           commit
工作区 ------ 暂存区 ------ 当前分支（HEAD指针）

git checkout -- 文件名   撤销修改返回到最近一次add  或commit 命令之前

git reset HEAD file  把暂存区的修改撤销掉，返回工作区

删除
git rm file 
git commit -m ''
git checkout --file   从版本库中恢复


ssh：
  1	根目录下 找到.ssh 目录   / id_rsa  id_rsa.pub    
	ssh-keygen -t rsa -C "youremail@example.com"
  2.登陆GitHub，打开“Account settings”，“SSH Keys”页面  --- add ssh key  
     在文本框中粘贴id_rsa.pub 的内容

远程：
	注册账号   
		yangyalin001
		406886018@qq.com
		

	在点击create new repo  
	 在name 栏   填入一个名称  点击create
HTTPS： git remote add origin https://github.com/yangyalin001/gitproj.git
ssh：	 git remote add origin git@github.com:yangyalin001/gitproj.git
<<<<<<< HEAD

推送：
	git push -u origin master   第一次推送加 -u 参数  关联本地master和远程master 以后简化
	git push origin master

	git push origin master:master1  创建一个新分支
 


clone:
	创建一个新仓库，name
	然后			git clone git@github.com:登录name/仓库name.git


分支

	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>

流程：创建分支 ----- 提交 ----- 切回主分支------ 合并分支 ----- 删除分支


冲突：
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

	用git log --graph命令可以看到分支合并图   git log --graph --pretty=oneline --abbrev-commit   可视化

分支管理
	git merge --no-ff -m "merge with no-ff" dev   --no-ff   保留分支记录
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
 
 bug分支，隐藏当前工作
 	git status          查看当前状态
 	git stash           储藏当前工作现场
 	git checkout 主分支
 	git checkout -b 临时分区  创建临时分区 处理bug
 	git add
 	git commit -m
 	git checkout 主分支
 	git merge --no-ff -m ...  合并删除临时分支

 	git checkout dev 切换隐藏工作区
 	git stash list 查看隐藏
 	git stash apply 恢复 不删除stash内容
 	git stash pop   恢复 并删除stash

 	git stash apply stash@{0}     多次stash


开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。


git remote 查看远程库信息
git remote -v   详细
 git push origin master  推送分支


 多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。


pull
把远程分支的代码pull到本地分支：git pull <远程主机名> <远程分支名>:<本地分支名>
如：取回origin主机的xf分支，与本地的xf分支合并，输入命令：
git pull origin xf:xf


查看该项目的所有本地和远程分支：git branch -a ，并在当前所在分支前加"*"标记
拓展：git branch 查看本地分支
git branch -r 查看远程分支
此处，我们查看所有分支，包括远程和本地，故输入命令：（该步骤可省略）
git branch -a